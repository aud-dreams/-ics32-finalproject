# John Daniel Norombaba
# jnoromba@uci.edu
# 91483000

# Audrey Nguyen
# audrehn3@uci.edu
# 50253773

# ds_protocol.py
# Handles protocols that communicate with the DSU server.

import json
from collections import namedtuple

# Namedtuple to hold the values retrieved from json messages.
DataTuple = namedtuple('DataTuple', ['response','type', 'messages'])

def join(username:str, password:str) -> str:
    '''
    Constructs the join protocol.
    :param username: A string username, usually derived from a Profile() object.
    :param password: A string password, usually derived from a Profile() object.
    
    '''
    try:
      # Test for whitespace.
      if username.split() != 0 and password.split() != 0:
        msg = f'{{"join": {{"username": "{username}","password": "{password}","token":""}}}}'
        return encode_json(msg)
      else:
        return ""
    except AttributeError or TypeError:
      # Tests for unsupported types or issues when calling split.
      return ""
  
def post(user_token:str, message:str) -> str:
  ''' 
  Constructs the post protocol. 
  :param user_token: A user token, derived from a response generated by a DSU server.
  :param message: A string message, derived from user's post.
  
  '''
  try:
    # Test for whitespace.
    if len(message.split()) != 0:
      msg = f'{{"token": "{user_token}", "post": {{"entry": "{message}", "timestamp": "1603167689.3928561"}}}}'
      return encode_json(msg)
    else:
      return ""
  except AttributeError or TypeError:
    # Tests for unsupported types or issues when calling split.
    return ""

def send(user_token:str, entry:dict):
  """ Send a directmessage to another DS user. """
  return encode_json(f'{{"token":{user_token}, "directmessage": {entry}}}')

def new(user_token):
  """ Request unread message from the DS server. """
  return encode_json(f'{{"token":"{user_token}", "directmessage": "new"}}')

def all(user_token):
  """ Request all messages from DS server. """
  return encode_json(f'{{"token":"{user_token}", "directmessage": "all"}}')

def update_bio(user_token:str, bio:str) -> str:
  '''
  Constructs the bio protocol.
  :param user_token: A user token, derived from a response generated by a DSU server.
  :param bio: A string biography, derived from a user's profile.
  
  '''
  try:
    if len(bio.split()) != 0:
      msg = f'{{"token": "{user_token}", "bio": {{"entry": "{bio}", "timestamp": "1603167689.3928561"}}}}'
      return encode_json(msg)
  except AttributeError or TypeError:
    return ""

def extract_json(json_msg:json) -> DataTuple:
  '''
  Converts json objects into a Python namedtuple.
  :param json_msg: A message encoded in json.

  '''
  try:
    messages = []
    json_obj = json.loads(json_msg)    
    response = json_obj['response']
    type = json_obj['response']['type']
    if 'messages' in response:
        messages = response['messages']
        print(messages)

  except json.JSONDecodeError:
    print("ERROR: JSON response cannot be decoded.")
    return DataTuple(response={'type': 'error'}, type='error')
  except:
    print("ERROR: Response cannot be decoded.")
    return DataTuple(response={'type': 'error'}, type='error')

  return DataTuple(response, type, messages)

def encode_json(str_msg:str) -> str:
  '''
  Encodes objects into json, utf-8.
  :param str_msg: A string message/bio type.
  
  '''
  return str_msg.encode('utf-8')